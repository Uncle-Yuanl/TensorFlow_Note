{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.1.0'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import gzip\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import pandas as pd\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "tf.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# GPU设置\n",
    "\n",
    "tf.debugging.set_log_device_placement(True)\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "for gpu in gpus:\n",
    "    tf.config.experimental.set_memeory_growth(gpu, True)\n",
    "print(len(gpus))\n",
    "logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n",
    "print(len(logical_gpus))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 定义加载数据的函数，data_folder为保存gz数据的文件夹，该文件夹下有4个文件\n",
    "# 'train-labels-idx1-ubyte.gz', 'train-images-idx3-ubyte.gz',\n",
    "# 't10k-labels-idx1-ubyte.gz', 't10k-images-idx3-ubyte.gz'\n",
    "\n",
    "def load_data(data_folder):\n",
    "\n",
    "  files = [\n",
    "      'train-labels-idx1-ubyte.gz', 'train-images-idx3-ubyte.gz',\n",
    "      't10k-labels-idx1-ubyte.gz', 't10k-images-idx3-ubyte.gz'\n",
    "  ]\n",
    "\n",
    "  paths = []\n",
    "  for fname in files:\n",
    "    paths.append(os.path.join(data_folder,fname))\n",
    "\n",
    "  with gzip.open(paths[0], 'rb') as lbpath:\n",
    "    y_train = np.frombuffer(lbpath.read(), np.uint8, offset=8)\n",
    "\n",
    "  with gzip.open(paths[1], 'rb') as imgpath:\n",
    "    x_train = np.frombuffer(\n",
    "        imgpath.read(), np.uint8, offset=16).reshape(len(y_train), 28, 28)\n",
    "\n",
    "  with gzip.open(paths[2], 'rb') as lbpath:\n",
    "    y_test = np.frombuffer(lbpath.read(), np.uint8, offset=8)\n",
    "\n",
    "  with gzip.open(paths[3], 'rb') as imgpath:\n",
    "    x_test = np.frombuffer(\n",
    "        imgpath.read(), np.uint8, offset=16).reshape(len(y_test), 28, 28)\n",
    "\n",
    "  return (x_train, y_train), (x_test, y_test)\n",
    "\n",
    "(x_train_all, y_train_all), (x_test, y_test) = load_data('F:\\\\2、Deep Learning\\Tensorflow\\Keras_datasets\\Fashion-MNIST')\n",
    "x_valid, x_train = x_train_all[:5000], x_train_all[5000:]\n",
    "y_valid, y_train = y_train_all[:5000], y_train_all[5000:]\n",
    "print(x_valid.shape, y_valid.shape)\n",
    "print(x_train.shape, y_train.shape)\n",
    "print(x_test.shape, y_test.shape)\n",
    "\n",
    "def show_single_image(image_arr):\n",
    "    plt.imshow(image_arr, cmap='binary')\n",
    "    plt.show()\n",
    "\n",
    "def show_images(n_rows, n_cols, x_data, y_data, class_names):\n",
    "    assert len(x_data) == len(y_data)\n",
    "    assert n_rows * n_cols < len(x_data)\n",
    "    plt.figure(figsize=(n_cols * 1.4, n_rows * 1.6))\n",
    "    for row in range(n_rows):\n",
    "        for col in range(n_cols):\n",
    "            index = n_cols * row + col\n",
    "            plt.subplot(n_rows, n_cols, index + 1)\n",
    "            plt.imshow(x_data[index], cmap='binary', interpolation='nearest')\n",
    "            plt.axis('off')\n",
    "            plt.title(class_names[y_data[index]])\n",
    "    plt.show()\n",
    "\n",
    "class_names = ['T-shirt', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal',\n",
    "               'Shirt', 'Sneaker', 'Bag', 'Ankle Boot']\n",
    "\n",
    "# show_single_image(x_train[0])\n",
    "\n",
    "# show_images(3, 5, x_train, y_train, class_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 对数据做归一化  \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "# x_train:[None, 28, 28] ->[None, 784] (函数需求)->[None, 28, 28]  归一化要用到除法转为float\n",
    "x_train_scaled = scaler.fit_transform(x_train.astype(np.float32).reshape(-1, 1)).reshape(-1, 28, 28)\n",
    "x_valid_scaled = scaler.transform(x_valid.astype(np.float32).reshape(-1, 1)).reshape(-1, 28, 28)\n",
    "x_test_scaled = scaler.transform(x_test.astype(np.float32).reshape(-1, 1)).reshape(-1, 28, 28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 生成dataset\n",
    "def make_dataset(images, labels, epochs, batch_size, shuffle = True):\n",
    "    dataset = tf.data.Dataset.from_tensor_slices((images, labels))\n",
    "    if shuffle:\n",
    "        dataset = dataset.shuffle(10000)\n",
    "    dataset = dataset.repeat(epochs).batch(batch_size).prefetch(50)\n",
    "    return dataset\n",
    "\n",
    "batch_size = 256\n",
    "# 不用repeat epochs次了，因为我们后面会在for循环中反复调用\n",
    "train_dataset = make_dataset(x_train_scaled, y_train, 1, batch_size)\n",
    "valid_dataset = make_dataset(x_valid_scaled, y_valid, 1, batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model =keras.Sequential()\n",
    "model.add(keras.layers.Conv2D(filters = 128, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.Conv2D(filters = 128, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.MaxPool2D(pool_size = 2))\n",
    "\n",
    "model.add(keras.layers.Conv2D(filters = 256, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.Conv2D(filters = 256, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.MaxPool2D(pool_size = 2))\n",
    "\n",
    "model.add(keras.layers.Conv2D(filters = 512, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.Conv2D(filters = 512, kernel_size = 3, padding = 'same',\n",
    "                              activation = 'relu', input_shape = (28, 28, 1)))\n",
    "model.add(keras.layers.MaxPool2D(pool_size = 2))\n",
    "\n",
    "model.add(keras.layers.Flatten())\n",
    "model.add(keras.layers.Dense(512, activation = 'relu'))\n",
    "model.add(keras.layers.Dense(10, activation='softmax'))\n",
    "\n",
    "# 去掉compile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# customized training loop\n",
    "# 1、define loss function\n",
    "# 2、define train step\n",
    "# 3、define test step\n",
    "# 4、for 循环完成 training loop\n",
    "\n",
    "loss_func = keras.losses.SparseCategoricalCrossentropy(\n",
    "    # 在batch_size上求和\n",
    "    reduction = keras.losses.Reduction.SUM_OVER_BATCH_SIZE)\n",
    "# 计算损失的累积值\n",
    "# API自带累积\n",
    "test_loss = keras.metrics.Mean(name = 'test_loss')\n",
    "train_accuracy = keras.metrics.SparseCategoricalAccuracy(name = 'train_accuracy')\n",
    "test_accuracy = keras.metrics.SparseCategoricalAccuracy(name = 'test_accuracy')\n",
    "\n",
    "optimizer = keras.optimizers.SGD(lr = 0.01)\n",
    "\n",
    "def train_step(inputs):\n",
    "    images, labels = inputs\n",
    "    with tf.GradientTape() as tape\n",
    "        predictions = model(images, training = True)\n",
    "        loss = loss_func(labels, predictions)\n",
    "    gradients = tape.gradient(loss, model.trainable_variables)\n",
    "    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n",
    "    train_accuracy.update_state(labels, predictions) \n",
    "    return loss\n",
    "\n",
    "\n",
    "def test_step(inputs):\n",
    "    images, labels = imputs\n",
    "    predictions = model(images, training = True)\n",
    "    t_loss = loss_func(labels, predictions)\n",
    "    # test_loss也是个累积值，可以计算从开始到现在的所有样本上损失函数的均值\n",
    "    test_loss.update_state(t_loss)\n",
    "    test_accuracy.update_state(labels, predictions)\n",
    "\n",
    "    \n",
    "epochs = 10 \n",
    "for epoch in range(epochs):\n",
    "    total_loss = 0.0\n",
    "    num_batches = 0\n",
    "    for x in train_dataset:\n",
    "        start_time = time.time()\n",
    "        total_loss += train_step(x)\n",
    "        run_time = time.time() - start_time\n",
    "        num_batches += 1\n",
    "        print('\\rtotal_loss: %3.3f, num_batches: %3.3f, average_loss: %3.3f,time: %3.3f' \n",
    "              % (total_loss, num_batches, total_loss / num_batches, run_time), end = '')\n",
    "    train_loss = total_loss / num_batches\n",
    "    \n",
    "    # 在valid上测试一遍\n",
    "    for x in valid_dataset:\n",
    "        test_step(x)\n",
    "    print('\\rEpoch: %d, loss: %3.3f, Acc: %3.3f, Val_loss: %3.3f, Val_acc: %3.3f' \n",
    "          % (epoch + 1, train_loss, train_accuracy.result(), \n",
    "             test_loss.result(), test_accuracy.result()))\n",
    "    test_loss.reset_states()\n",
    "    train_accuracy.reset_states()\n",
    "    test_accuracy.reset_states()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# baseline2： 在def train_step 和def test_step 前加上@tf.dunction\n",
    "# 观察运算速度"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 改造为分布式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1、生成dataset过程中添加分布式策略\n",
    "def make_dataset(images, labels, epochs, batch_size, shuffle = True):\n",
    "    dataset = tf.data.Dataset.from_tensor_slices((images, labels))\n",
    "    if shuffle:\n",
    "        dataset = dataset.shuffle(10000)\n",
    "    dataset = dataset.repeat(epochs).batch(batch_size).prefetch(50)\n",
    "    return dataset\n",
    "strategy = tf.distribute.MirroredStrategy()\n",
    "\n",
    "with strategy.scope():\n",
    "    batch_size_per_replica = 256\n",
    "    batch_size = batch_size_per_replica * len(logical_gpus)\n",
    "    train_dataset = make_dataset(x_train_scaled, y_train, 1, batch_size)\n",
    "    valid_dataset = make_dataset(x_valid_scaled, y_valid, 1, batch_size)\n",
    "    # 改造为分布式的dataset\n",
    "    # 改前：一个dataset先分成若干batch，再将batch中数据分成相应份数给对应的GPU\n",
    "    # 该后：给每个GPU一个完整的dataset\n",
    "    train_dataset_distribute = strategy.experimental_distribute_dataset(train_dataset)\n",
    "    valid_dataset_distribute = strategy.experimental_distribute_dataset(valid_dataset)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2、改模型部分\n",
    "with strategy.scope():\n",
    "    model = keras.Sequential()\n",
    "    ..\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3、自定义流程\n",
    "with strategy.scope():\n",
    "    # 因为在MirroredStrategy中，每个GPU上的数据量是 batch_size / #{gpus}\n",
    "    # 如batch_size = 64， #{gpus} = 4, 每个GPU的batch_size为 16 \n",
    "    # 若reduction = SUM_OVER_BATCH_SIZE，就是在16个数据上做平均，\n",
    "    # 而真实情况应该是在64上测平均\n",
    "    loss_func = keras.losses.SparseCategoricalCrossentropy(\n",
    "        reduction = keras.losses.Reduction.NONE)\n",
    "    def compute_loss(labels, predictions):\n",
    "        per_replica_loss = loss_func(labels, predictions)\n",
    "        # loss去除以batch_size（64），而不是batch_size / #{gpus} (16)\n",
    "        # 实际上前面定义的时候 batch_size = batch_size_per_replica * #{gpus}\n",
    "        return tf.nn.compute_average_loss(per_replica_loss,\n",
    "                                          global_batch_size = batch_size)\n",
    "    ...\n",
    "    \n",
    "    # 1、将train_step中的loss计算方法替换\n",
    "    # 2、封装train_step和test_step，让其可以给多个GPU使用\n",
    "    \n",
    "    # @tf.function 后面会被封装，则这里的@tf.function就没必要了\n",
    "    def train_step(inputs):\n",
    "        images, labels = inputs\n",
    "        with tf.GradientTape() as tape:\n",
    "            predictions = model(images, training = True)\n",
    "            loss = compute_loss(labels, predictions)\n",
    "            ...\n",
    "    \n",
    "    @tf.function\n",
    "    def distributed_train_step(inputs):\n",
    "        # 调用train_step来获得每个GPU上的损失\n",
    "        per_replica_average_loss = strategy.experimental_run_v2(train_step,\n",
    "                                                                args = (inputs, ))\n",
    "        # 把不同GPU上的loss聚合起来\n",
    "        return strategy.reduce(tf.distribute.ReduceOp.SUM, # 聚合策略\n",
    "                               per_replica_average_loss,\n",
    "                               axis = None)\n",
    "    ...\n",
    "    \n",
    "    # test_step本身不变\n",
    "    @tf.function\n",
    "    def distributed_train_step(inputs):\n",
    "        strategy.experimental_run_v2(test_step,args = (inputs, ))\n",
    "        # test不需要将loss和accuracy聚合，这是因为在test_step中本身就有一个可以累积计算的metric\n",
    "        # 他们的每个GPU只要单独的调用update_state就可以了\n",
    "\n",
    "    # 下面的代码中相应的改变调用的函数就行了"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
